stages:
  download_embeddings:
    cmd: download_embeddings "${baselanguages[@]}"
    deps:
    - "/dev/null"
    outs:
    - "embeddings/base/models/"

  compute_alignments:
    cmd: compute_alignments "${clwepivot}" "${baselanguages[@]}"
    deps:
    - "embeddings/base/models/"
    - "embeddings/base/dicts/"
    outs:
    - "embeddings/base/align/"

  prepare_data:
    cmd: prepare_data
    deps:
    - "/dev/null"
    outs:
    - "data/base/raw/parallel/"

  prepare_monolingual_data:
    cmd: prepare_monolingual_data "${baselanguages[*]}" "${baselanguages[*]}"
    deps:
    - "/dev/null"
    outs:
    - "data/base/raw/monolingual/"

  generate_specials:
    cmd: generate_specials "$embdim" "${baselanguages[@]}"
    deps:
    - "/dev/null"
    outs:
    - "data/base/specials.vec"

  build_embeddings:
    cmd: build_embeddings "${baselanguages[@]}"
    deps:
    - "extract-words.py"
    - "data/base/raw/monolingual/"
    - "embeddings/base/align/"
    - "embeddings/base/raw/"
    outs:
    - "data/base/embeddings/"

  build_basesystem_embeddings:
    cmd: build_basesystem_embeddings "${baselanguages[@]}"
    deps:
    - "data/base/embeddings/"
    outs:
    - "data/base/vocab/"
    # XXX concatenated embeddings, change name
    - "data/base/allembeddings/"

  concat_data:
    cmd: concat_data "${stage}" "${baselanguages[*]}" "${baselanguages[*]}"
    deps:
    - "data/base/raw/parallel/"
    outs:
    - "data/base/corpus/"

  preprocess:
    cmd: preprocess "${stage}"
    deps:
    - "data/base/corpus/"
    - "data/base/vocab/"
    - "data/base/allembeddings/"
    outs:
    - "saves/${stage}/"

  train:
    cmd: train "${stage}" "$model" "$baseconfig"
    deps:
    - "saves/${stage}/"
    outs:
    - "models/${stage}/"
    metrics:
    - "logs/${stage}/"

  preprocess_evaluation_data:
    cmd: preprocess_evaluation_data "${baselanguages[*]}" "${baselanguages[*]}"
    deps:
    - "data/base/raw/parallel/"
    outs:
    - "data/base/eval/"

  evauate_bleu:
    cmd: evauate_bleu "$stage" "$basemodel" "${baselanguages[*]}" "${baselanguages[*]}"
    deps:
    - "models/${stage}/"
    - "data/${stage}/eval/"
    outs:
    - "translations/${stage}/"
    - "scores/${stage}/"

  # set_stage "newlang"
  download_embeddings:
    cmd: download_embeddings "${newlanguages[@]}"
    deps:
    - "/dev/null"
    outs:
    - "embeddings/newlang/models/"

  compute_alignments:
    cmd: compute_alignments "${clwepivot}" "${newlanguages[@]}"
    deps:
    - "embeddings/newlang/models/"
    - "embeddings/newlang/dicts/"
    outs:
    - "embeddings/newlang/align/"

  prepare_monolingual_data:
    cmd: prepare_monolingual_data "${newlanguages[*]}" "${baselanguages[*]}"
    deps:
    - "/dev/null"
    outs:
    - "data/newlang/raw/monolingual/"

  build_embeddings:
    cmd: build_embeddings "${newlanguages[@]}"
    deps:
    - "extract-words.py"
    - "data/newlang/raw/monolingual/"
    - "embeddings/newlang/align/"
    - "embeddings/newlang/raw/"
    outs:
    - "data/newlang/embeddings/"

  # set_stage "blindenc"
  prepare_evaluation_data:
    cmd: prepare_evaluation_data "${newlanguages[*]}" "${baselanguages[*]}"
    deps:
    - "/dev/null"
    outs:
    - "data/newlang/raw/parallel_for_eval/newsrc/"

  preprocess_evaluation_data:
    cmd: preprocess_evaluation_data "${newlanguages[*]}" "${baselanguages[*]}"
    deps:
    - "data/newlang/raw/parallel_for_eval/newsrc/"
    outs:
    - "data/newlang/eval/newsrc/"

  evauate_bleu:
    cmd: evauate_bleu "$stage" "$basemodel" "${newlanguages[*]}" "${baselanguages[*]}"
    deps:
    - "models/base/"
    - "data/${stage}/eval/newsrc/"
    outs:
    - "translations/${stage}/"
    - "scores/${stage}/"

  # set_stage "blinddec"
  prepare_evaluation_data:
    cmd: prepare_evaluation_data "${baselanguages[*]}" "${newlanguages[*]}"
    deps:
    - "/dev/null"
    outs:
    - "data/newlang/raw/parallel_for_eval/newtgt/"

  preprocess_evaluation_data:
    cmd: preprocess_evaluation_data "${baselanguages[*]}" "${newlanguages[*]}"
    deps:
    - "data/newlang/raw/parallel_for_eval/newtgt/"
    outs:
    - "data/newlang/eval/newtgt/"

  evauate_bleu:
    cmd: evauate_bleu "$stage" "$basemodel" "${baselanguages[*]}" "${newlanguages[*]}"
    deps:
    - "models/base/"
    - "data/newlang/eval/newtgt/"
    outs:
    - "translations/${stage}/"
    - "scores/${stage}/"

  # set_stage "autoencoder"
  build_newlang_vocab:
    cmd: build_newlang_vocab "$basemodel" "${newlanguages[*]}" "${newlanguages[*]}"
    deps:
    - "data/base/specials.vec" 
    - "data/newlang/embeddings/" 
    outs:
    - "data/newlang/data.vocab.pt"

  concat_autoencoding_corpus:
    cmd: concat_autoencoding_corpus "$stage" "${newlanguages[*]}"
    deps:
    - "data/newlang/raw/monolingual/"
    outs:
    - "data/newlang/corpus/"

  preprocess_reuse_vocab:
    cmd: preprocess_reuse_vocab "$stage" "$savedir/data.vocab.pt"
    deps:
    - "data/newlang/corpus/"
    outs:
    - "saves/${stage}/"

  train_continue:
    cmd: train_continue "$stage" "$model" "$autoencoderconfig" "$basemodel"
    deps:
    - "saves/${stage}/"
    outs:
    - "models/${stage}/"
    metrics:
    - "logs/${stage}/"

  evauate_bleu:
    cmd: evauate_bleu "$stage" "$aemodel" "${baselanguages[*]}" "${newlanguages[*]}"
    deps:
    - "models/${stage}/"
    - "data/${stage}/eval/"
    outs:
    - "translations/${stage}/"
    - "scores/${stage}/"

  # set_stage "backtranslate"
  prepare_backtranslation_data:
    cmd: prepare_backtranslation_data "$data_in" "${baselanguages[*]}" "${newlanguages[*]}"
    deps:
    - "data/newlang/raw/monolingual/"
    outs:
    - "data/newlang/bt/src/round1/"

  backtranslation_round:
    cmd: freezeenc=y backtranslation_round "$basemodel" "$btmodel" "${baselanguages[*]}" "${newlanguages[*]}"
    deps:
    - "data/newlang/bt/src/round1/"
    - "models/bt/round0/"
    - "models/bt/basemodel/"
    outs:
    #- "data/newlang/bt/tgt/round1/"
    - "models/bt/round1/"

  evauate_bleu:
    cmd: evauate_bleu "$stage" "$btmodel" "${baselanguages[*]}" "${newlanguages[*]}"
    deps:
    - "models/${stage}/round1/"
    - "data/${stage}/eval/"
    outs:
    - "translations/${stage}/round1/"
    - "scores/${stage}/round1/"

  prepare_backtranslation_data:
    cmd: prepare_backtranslation_data "$data_in" "${newlanguages[*]}" "${baselanguages[*]}"
    deps:
    - "data/newlang/raw/monolingual/"
    outs:
    - "data/newlang/bt/src/round2/"

  backtranslation_round:
    cmd: freezeenc= backtranslation_round "$basemodel" "$btmodel" "${newlanguages[*]}" "${baselanguages[*]}"
    deps:
    - "data/newlang/bt/src/round2/"
    - "models/bt/round1/"
    - "models/bt/basemodel/"
    outs:
    #- "data/newlang/bt/tgt/round2/"
    - "models/bt/round2/"

  evauate_bleu:
    cmd: evauate_bleu "$stage" "$btmodel" "${newlanguages[*]}" "${baselanguages[*]}"
    deps:
    - "models/${stage}/round2"
    - "data/${stage}/eval/"
    outs:
    - "translations/${stage}/round2/"
    - "scores/${stage}/round2/"
